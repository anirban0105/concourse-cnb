// Code generated by counterfeiter. DO NOT EDIT.
package bindingsfakes

import (
	"io"
	"sync"

	"github.com/datianshi/concourse-cnb/config/pkg/bindings"
)

type FakeContent struct {
	GenerateContentStub        func() (io.Reader, error)
	generateContentMutex       sync.RWMutex
	generateContentArgsForCall []struct {
	}
	generateContentReturns struct {
		result1 io.Reader
		result2 error
	}
	generateContentReturnsOnCall map[int]struct {
		result1 io.Reader
		result2 error
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContent) GenerateContent() (io.Reader, error) {
	fake.generateContentMutex.Lock()
	ret, specificReturn := fake.generateContentReturnsOnCall[len(fake.generateContentArgsForCall)]
	fake.generateContentArgsForCall = append(fake.generateContentArgsForCall, struct {
	}{})
	stub := fake.GenerateContentStub
	fakeReturns := fake.generateContentReturns
	fake.recordInvocation("GenerateContent", []interface{}{})
	fake.generateContentMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContent) GenerateContentCallCount() int {
	fake.generateContentMutex.RLock()
	defer fake.generateContentMutex.RUnlock()
	return len(fake.generateContentArgsForCall)
}

func (fake *FakeContent) GenerateContentCalls(stub func() (io.Reader, error)) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = stub
}

func (fake *FakeContent) GenerateContentReturns(result1 io.Reader, result2 error) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = nil
	fake.generateContentReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeContent) GenerateContentReturnsOnCall(i int, result1 io.Reader, result2 error) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = nil
	if fake.generateContentReturnsOnCall == nil {
		fake.generateContentReturnsOnCall = make(map[int]struct {
			result1 io.Reader
			result2 error
		})
	}
	fake.generateContentReturnsOnCall[i] = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeContent) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	stub := fake.NameStub
	fakeReturns := fake.nameReturns
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContent) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeContent) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeContent) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeContent) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeContent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateContentMutex.RLock()
	defer fake.generateContentMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bindings.Content = new(FakeContent)
